{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAY,CAChBC,QAASJ,EAAOK,SAASC,MACzBC,OAAQP,EAAOK,SAASG,KACxBC,SAAUT,EAAOK,SAASK,OAC1BC,SAAUX,EAAOY,SAAS,IAKxBC,EAAS,EAiCb,SAASC,EAAcC,EAAUT,GAC/B,OAAO,IAAIU,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,CAAEF,WAAUT,UAEhBY,EAAI,CAAEH,WAAUT,S,GAEjBA,E,IAxCPN,EAAOsB,iBAAiB,UAExB,SAA0BC,GACxBA,EAAIC,iBACJ,IAAIC,EAAQC,OAAOvB,EAAUC,QAAQuB,OAC/BnB,EAAOkB,OAAOvB,EAAUI,OAAOoB,OACrCd,EAASa,OAAOvB,EAAUM,SAASkB,OAEnCR,YAAW,WACT,IAAK,IAAIS,EAAW,EAAGA,GAAYf,EAAQe,GAAY,EACrDd,EAAcc,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUT,EAAKwB,EAALxB,MACjByB,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAAN5B,EAAM,M,IAKjD6B,OAAM,SAAAL,G,IAAGf,EAAQe,EAARf,SAAUT,EAAKwB,EAALxB,MAClByB,EAAAjC,GAASkC,OAAOI,QACd,sBAAqCF,OAAfnB,EAAS,QAAYmB,OAAN5B,EAAM,M,IAKjDmB,GAASjB,C,GAEViB,GACHzB,EAAOqC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst selectors = {\n  delayEl: formEl.elements.delay,\n  stepEl: formEl.elements.step,\n  amountEl: formEl.elements.amount,\n  submitEl: formEl.children[3],\n};\n\n// let fulfilledCount = 0;\n// let rejectedCount = 0;\nlet amount = 0;\n\nformEl.addEventListener('submit', promiseGenerator);\n\nfunction promiseGenerator(evt) {\n  evt.preventDefault();\n  let delay = Number(selectors.delayEl.value);\n  const step = Number(selectors.stepEl.value);\n  amount = Number(selectors.amountEl.value);\n\n  setTimeout(() => {\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n          // fulfilledCount += 1;\n          // checkCompletion();\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n          // rejectedCount += 1;\n          // checkCompletion();\n        });\n      delay += step;\n    }\n  }, delay);\n  formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// function checkCompletion() {\n//   if (fulfilledCount + rejectedCount === amount) {\n//     formEl.reset();\n//   }\n// }\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$selectors","delayEl","elements","delay","stepEl","step","amountEl","amount","submitEl","children","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","addEventListener","evt","preventDefault","delay1","Number","value","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.e7c46521.js.map"}
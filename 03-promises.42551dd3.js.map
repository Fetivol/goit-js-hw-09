{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAY,CAChBC,QAASJ,EAAOK,SAASC,MACzBC,OAAQP,EAAOK,SAASG,KACxBC,SAAUT,EAAOK,SAASK,QAG5B,IAAIC,EAAiB,EACjBC,EAAgB,EAChBC,EAAS,EAgCb,SAASC,EAAcC,EAAUT,GAC/B,OAAO,IAAIU,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAI,C,SAAEF,E,MAAUT,IAEhBY,EAAI,C,SAAEH,E,MAAUT,GAAQ,GAEzBA,EAAM,G,CAIb,SAASgB,IACHX,EAAiBC,IAAkBC,GACrCb,EAAOuB,O,CA7CXvB,EAAOwB,iBAAiB,UAExB,SAA0BC,GACxBA,EAAIC,iBACJ,IAAIC,EAAQC,OAAOzB,EAAUC,QAAQyB,OACrC,MAAMrB,EAAOoB,OAAOzB,EAAUI,OAAOsB,OACrChB,EAASe,OAAOzB,EAAUM,SAASoB,OAEnCV,YAAW,KACT,IAAK,IAAIW,EAAW,EAAGA,GAAYjB,EAAQiB,GAAY,EACrDhB,EAAcgB,EAAUH,GACrBI,MAAK,EAAChB,SAAEA,EAAQT,MAAEA,MACjB0B,EAAAlC,GAASmC,OAAOC,QACd,uBAAqBnB,QAAiBT,OAExCK,GAAkB,EAClBW,GAAiB,IAElBa,OAAM,EAACpB,SAAEA,EAAQT,MAAEA,MAClB0B,EAAAlC,GAASmC,OAAOG,QACd,sBAAoBrB,QAAeT,OAErCM,GAAiB,EACjBU,GAAiB,IAErBK,GAASnB,C,GAEVmB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst selectors = {\n  delayEl: formEl.elements.delay,\n  stepEl: formEl.elements.step,\n  amountEl: formEl.elements.amount,\n};\n\nlet fulfilledCount = 0;\nlet rejectedCount = 0;\nlet amount = 0;\n\nformEl.addEventListener('submit', promiseGenerator);\n\nfunction promiseGenerator(evt) {\n  evt.preventDefault();\n  let delay = Number(selectors.delayEl.value);\n  const step = Number(selectors.stepEl.value);\n  amount = Number(selectors.amountEl.value);\n\n  setTimeout(() => {\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n          fulfilledCount += 1;\n          checkCompletion();\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n          rejectedCount += 1;\n          checkCompletion();\n        });\n      delay += step;\n    }\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction checkCompletion() {\n  if (fulfilledCount + rejectedCount === amount) {\n    formEl.reset();\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$selectors","delayEl","elements","delay","stepEl","step","amountEl","amount","$47d4ff9957288465$var$fulfilledCount","$47d4ff9957288465$var$rejectedCount","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","$47d4ff9957288465$var$checkCompletion","reset","addEventListener","evt","preventDefault","delay1","Number","value","position1","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.42551dd3.js.map"}